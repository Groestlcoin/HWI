container:
  dockerfile: ci/cirrus.Dockerfile

env:
  EMAIL: cirrus@cirrus-ci.org

device_matrix_template: &DEVICE_MATRIX_TEMPLATE
  - env:
      DEVICE: --trezor-1
    depends_on:
      - Trezor 1 Sim Builder
      - dist_builder
      - groestlcoind_builder
    fetch_sim_script:
      - wget -nv "https://api.cirrus-ci.com/v1/artifact/build/$CIRRUS_BUILD_ID/Trezor 1 Sim Builder/sim/trezor-firmware.tar.gz"
      - tar -xvf "trezor-firmware.tar.gz"
      - wget -nv "https://api.cirrus-ci.com/v1/artifact/build/$CIRRUS_BUILD_ID/groestlcoind_builder/groestlcoin/groestlcoin.tar.gz"
      - tar -xvf "groestlcoin.tar.gz"
  - env:
      DEVICE: --trezor-t
    depends_on:
      - Trezor T Sim Builder
      - dist_builder
      - groestlcoind_builder
    fetch_sim_script:
      - wget -nv "https://api.cirrus-ci.com/v1/artifact/build/$CIRRUS_BUILD_ID/Trezor T Sim Builder/sim/trezor-firmware.tar.gz"
      - tar -xvf "trezor-firmware.tar.gz"
      - wget -nv "https://api.cirrus-ci.com/v1/artifact/build/$CIRRUS_BUILD_ID/groestlcoind_builder/groestlcoin/groestlcoin.tar.gz"
      - tar -xvf "groestlcoin.tar.gz"
  - env:
      DEVICE: --ledger
    depends_on:
      - Ledger Sim Builder
      - Ledger App Builder
      - dist_builder
      - groestlcoind_builder
    fetch_sim_script:
      - wget -nv "https://api.cirrus-ci.com/v1/artifact/build/$CIRRUS_BUILD_ID/Ledger Sim Builder/sim/speculos.tar.gz"
      - tar -xvf "speculos.tar.gz"
      - wget -nv "https://api.cirrus-ci.com/v1/artifact/build/$CIRRUS_BUILD_ID/groestlcoind_builder/groestlcoin/groestlcoin.tar.gz"
      - tar -xvf "groestlcoin.tar.gz"
    fetch_ledger_app_script:
      - wget -nv "https://api.cirrus-ci.com/v1/artifact/build/$CIRRUS_BUILD_ID/Ledger App Builder/built_ledger_app/app-groestlcoin/bin/app.elf"
      - mv app.elf test/work/speculos/apps/grs-test.elf
    sim_install_script:
      - poetry run pip install construct flask-restful jsonschema mnemonic pyelftools pillow requests
      - pip install construct flask-restful jsonschema mnemonic pyelftools pillow requests
  - env:
      DEVICE: --ledger-legacy
    depends_on:
      - Ledger Sim Builder
      - dist_builder
      - groestlcoind_builder
    fetch_sim_script:
      - wget -nv "https://api.cirrus-ci.com/v1/artifact/build/$CIRRUS_BUILD_ID/Ledger Sim Builder/sim/speculos.tar.gz"
      - tar -xvf "speculos.tar.gz"
      - wget -nv "https://api.cirrus-ci.com/v1/artifact/build/$CIRRUS_BUILD_ID/groestlcoind_builder/groestlcoin/groestlcoin.tar.gz"
      - tar -xvf "groestlcoin.tar.gz"
    sim_install_script:
      - poetry run pip install construct flask-restful jsonschema mnemonic pyelftools pillow requests
      - pip install construct flask-restful jsonschema mnemonic pyelftools pillow requests
  - env:
      DEVICE: --keepkey
    depends_on:
      - Keepkey Sim Builder
      - dist_builder
      - groestlcoind_builder
    fetch_sim_script:
      - wget -nv "https://api.cirrus-ci.com/v1/artifact/build/$CIRRUS_BUILD_ID/Keepkey Sim Builder/sim/keepkey-firmware.tar.gz"
      - tar -xvf "keepkey-firmware.tar.gz"
      - wget -nv "https://api.cirrus-ci.com/v1/artifact/build/$CIRRUS_BUILD_ID/groestlcoind_builder/groestlcoin/groestlcoin.tar.gz"
      - tar -xvf "groestlcoin.tar.gz"

lint_task:
  test_script:
    - flake8

task:
  install_script:
    - poetry install
  matrix:
    - name: Type Check
      type_check_script: >
        poetry run
        mypy
        hwi.py
        hwilib/_base58.py
        hwilib/_bech32.py
        hwilib/_cli.py
        hwilib/commands.py
        hwilib/common.py
        hwilib/descriptor.py
        hwilib/devices/__init__.py
        hwilib/devices/keepkey.py
        hwilib/devices/ledger.py
        hwilib/devices/trezor.py
        hwilib/errors.py
        hwilib/_script.py
        hwilib/_serialize.py
        hwilib/tx.py
        hwilib/hwwclient.py
        hwilib/__init__.py
        hwilib/key.py
        hwilib/udevinstaller.py

wine_builder_task:
  container:
    dockerfile: contrib/build.Dockerfile
  build_script:
    - contrib/build_wine.sh
    - find dist -type f -exec sha256sum {} \;

groestlcoind_builder_task:
  groestlcoind_cache:
    folder: test/work/groestlcoin
  ccache_cache:
    folder: /root/.ccache
  env:
    BUILD_GROESTLCOIND: 1
  build_script:
    - cd test; ./setup_environment.sh --groestlcoind; cd ..
    - tar -czf groestlcoin.tar.gz test/work/groestlcoin
  groestlcoin_artifacts:
    path: "groestlcoin.tar.gz"

task:
  env:
    DEVICE: --trezor-1
  name: Trezor 1 Sim Builder
  sim_work_cache:
    folder: test/work/trezor-firmware
  build_script:
    - cd test; ./setup_environment.sh $DEVICE; cd ..
    - tar -czf trezor-firmware.tar.gz test/work/trezor-firmware
  sim_artifacts:
    path: "trezor-firmware.tar.gz"

task:
  env:
    DEVICE: --trezor-t
  name: Trezor T Sim Builder
  sim_work_cache:
    folder: test/work/trezor-firmware
  build_script:
    - cd test; ./setup_environment.sh $DEVICE; cd ..
    - tar -czf trezor-firmware.tar.gz test/work/trezor-firmware
  sim_artifacts:
    path: "trezor-firmware.tar.gz"

task:
  env:
    DEVICE: --ledger
  name: Ledger Sim Builder
  sim_work_cache:
    folder: test/work/speculos
  build_script:
    - cd test; ./setup_environment.sh $DEVICE; cd ..
    - tar -czf speculos.tar.gz test/work/speculos
  sim_artifacts:
    path: "speculos.tar.gz"

task:
  env:
    DEVICE: --keepkey
  name: Keepkey Sim Builder
  sim_work_cache:
    folder: test/work/keepkey-firmware
  build_script:
    - cd test; ./setup_environment.sh $DEVICE; cd ..
    - tar -czf keepkey-firmware.tar.gz test/work/keepkey-firmware/bin
  sim_artifacts:
    path: "keepkey-firmware.tar.gz"


dist_builder_task:
  container:
    dockerfile: contrib/build.Dockerfile
  build_script:
    - contrib/build_bin.sh
    - contrib/build_dist.sh
    - find dist -type f -exec sha256sum {} \;
  built_dist_artifacts:
    path: "dist/*"

ledger_app_builder_task:
  name: Ledger App Builder
  container:
    dockerfile: ci/ledger-app-builder.Dockerfile
  build_script:
    - git clone https://github.com/LedgerHQ/app-groestlcoin.git
    - cd app-groestlcoin
    - make DEBUG=1
  built_ledger_app_artifacts:
    path: app-groestlcoin/bin/app.elf

task:
  matrix:
    << : *DEVICE_MATRIX_TEMPLATE
  fetch_dist_script:
    - wget -nv "https://api.cirrus-ci.com/v1/artifact/build/$CIRRUS_BUILD_ID/dist_builder/built_dist.zip"
    - unzip built_dist.zip
  matrix:
    - name: $DEVICE Wheel
      install_script: pip install dist/*.whl
    - name: $DEVICE Sdist
      install_script: pip install $(find dist -name "*.tar.gz" -a -not -name "*amd64*")
    - name: $DEVICE Bindist
      install_script: poetry install
      untar_bindist_script: cd dist; tar -xvf hwi*linux*.tar.gz; cd ..

task:
  matrix:
    - container:
        dockerfile: ci/cirrus.Dockerfile
      env:
        PYTHON: 3.6
    - container:
        dockerfile: ci/py37.Dockerfile
      env:
        PYTHON: 3.7
    - container:
        dockerfile: ci/py38.Dockerfile
      env:
        PYTHON: 3.8
    - container:
        dockerfile: ci/py39.Dockerfile
      env:
        PYTHON: 3.9
    - container:
        dockerfile: ci/py310.Dockerfile
      env:
        PYTHON: 3.10
  install_script: poetry install
  matrix:
    << : *DEVICE_MATRIX_TEMPLATE
  matrix:
    - env:
        INTERFACE: library
    - env:
        INTERFACE: cli
    - env:
        INTERFACE: stdin
  name: Python $PYTHON $DEVICE $INTERFACE
